
AVRASM ver. 2.1.30  \\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm Fri Oct 09 19:17:07 2015

\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1058): warning: Register r2 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1059): warning: Register r3 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1060): warning: Register r4 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1061): warning: Register r5 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1062): warning: Register r7 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1063): warning: Register r8 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1064): warning: Register r9 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1065): warning: Register r10 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1066): warning: Register r11 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1067): warning: Register r12 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1068): warning: Register r13 already defined by the .DEF directive
\\192.168.1.3\сетевая\Гидро\V2\Гидро\List\Gi.asm(1069): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATtiny85
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny85
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x11
                 	.EQU GPIOR1=0x12
                 	.EQU GPIOR2=0x13
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _migMig=R2
                 	.DEF _migMig_msb=R3
                 	.DEF _adcTemp=R4
                 	.DEF _adcTemp_msb=R5
                 	.DEF _adcCount=R7
                 	.DEF _adcVal=R8
                 	.DEF _adcVal_msb=R9
                 	.DEF _pwmVal=R10
                 	.DEF _pwmVal_msb=R11
                 	.DEF _setZero=R12
                 	.DEF _setZero_msb=R13
                 	.DEF _fl=R6
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01c      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 c050      	RJMP _timer1_compa_isr
000004 c04c      	RJMP _timer1_ovf_isr
000005 c061      	RJMP _timer0_ovf_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c0ff      	RJMP _adc_isr
000009 c052      	RJMP _timer1_compb_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00000f 0000
000010 0000      	.DB  0x0,0x0,0x0,0x0
000011 0000
000012 0000      	.DB  0x0,0x0,0x0,0x0
000013 0000
000014 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000015 0181      	.DB  0x81,0x1
                 
                 __GLOBAL_INI_TBL:
000016 000c      	.DW  0x0C
000017 0002      	.DW  0x02
000018 001e      	.DW  __REG_VARS*2
                 
000019 0002      	.DW  0x02
00001a 00e0      	.DW  _zero
00001b 002a      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00001c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00001d 94f8      	CLI
00001e 27ee      	CLR  R30
00001f bbec      	OUT  EECR,R30
000020 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000021 e1f8      	LDI  R31,0x18
000022 95a8      	WDR
000023 b7a4      	IN   R26,MCUSR
000024 7fa7      	CBR  R26,8
000025 bfa4      	OUT  MCUSR,R26
000026 bdf1      	OUT  WDTCR,R31
000027 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000028 e08d      	LDI  R24,(14-2)+1
000029 e0a2      	LDI  R26,2
00002a 27bb      	CLR  R27
                 __CLEAR_REG:
00002b 93ed      	ST   X+,R30
00002c 958a      	DEC  R24
00002d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00002e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00002f e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000030 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000031 93ed      	ST   X+,R30
000032 9701      	SBIW R24,1
000033 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000034 e2ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000035 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000036 9185      	LPM  R24,Z+
000037 9195      	LPM  R25,Z+
000038 9700      	SBIW R24,0
000039 f061      	BREQ __GLOBAL_INI_END
00003a 91a5      	LPM  R26,Z+
00003b 91b5      	LPM  R27,Z+
00003c 9005      	LPM  R0,Z+
00003d 9015      	LPM  R1,Z+
00003e 01bf      	MOVW R22,R30
00003f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000040 9005      	LPM  R0,Z+
000041 920d      	ST   X+,R0
000042 9701      	SBIW R24,1
000043 f7e1      	BRNE __GLOBAL_INI_LOOP
000044 01fb      	MOVW R30,R22
000045 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000046 e0e0      	LDI  R30,__GPIOR0_INIT
000047 bbe1      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000048 bbe2      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000049 bbe3      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004b bfed      	OUT  SPL,R30
00004c e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004e eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004f e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000050 c0e2      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 28.09.2015
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATtiny85
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 128
                 ;*****************************************************/
                 ;
                 ;#include <tiny85.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;#define abs(_a) (((_a)>=0)?_a:-_a)
                 ;
                 ;#define LED PORTB.2
                 ;#define ADCIN 2
                 ;#define DEAD_VALUE 20
                 ;#define PWM1 PORTB.1
                 ;#define PWM2 PORTB.3
                 ;
                 ;int migMig=0;
                 ;signed int adcTemp=0;
                 ;char adcCount=0;
                 ;signed int adcVal=0;
                 ;signed int pwmVal=0;
                 ;unsigned int setZero=0;
                 ;signed int zero = 385;
                 
                 	.DSEG
                 ;char fl = 0;
                 ;
                 ;
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 002F {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
                 ; 0000 0030     PWM1 = 1;
000051 9ac1      	SBI  0x18,1
                 ; 0000 0031     PWM2 = 1;
000052 9ac3      	SBI  0x18,3
                 ; 0000 0032 
                 ; 0000 0033 }
000053 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer1 output compare A interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0037 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000054 93ea      	ST   -Y,R30
000055 b7ef      	IN   R30,SREG
000056 93ea      	ST   -Y,R30
                 ; 0000 0038 // Place your code here
                 ; 0000 0039     if(OCR1A<255) PWM1 = 0;
000057 b5ee      	IN   R30,0x2E
000058 3fef      	CPI  R30,LOW(0xFF)
000059 f408      	BRSH _0x8
00005a 98c1      	CBI  0x18,1
                 ; 0000 003A }
                 _0x8:
00005b c007      	RJMP _0x3E
                 ; .FEND
                 ;
                 ;// Timer1 output compare B interrupt service routine
                 ;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
                 ; 0000 003E {
                 _timer1_compb_isr:
                 ; .FSTART _timer1_compb_isr
00005c 93ea      	ST   -Y,R30
00005d b7ef      	IN   R30,SREG
00005e 93ea      	ST   -Y,R30
                 ; 0000 003F // Place your code here
                 ; 0000 0040     if(OCR1B<255) PWM2 = 0;
00005f b5eb      	IN   R30,0x2B
000060 3fef      	CPI  R30,LOW(0xFF)
000061 f408      	BRSH _0xB
000062 98c3      	CBI  0x18,3
                 ; 0000 0041 }
                 _0xB:
                 _0x3E:
000063 91e9      	LD   R30,Y+
000064 bfef      	OUT  SREG,R30
000065 91e9      	LD   R30,Y+
000066 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) //1ms
                 ; 0000 0046 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000067 920a      	ST   -Y,R0
000068 921a      	ST   -Y,R1
000069 936a      	ST   -Y,R22
00006a 937a      	ST   -Y,R23
00006b 93aa      	ST   -Y,R26
00006c 93ba      	ST   -Y,R27
00006d 93ea      	ST   -Y,R30
00006e 93fa      	ST   -Y,R31
00006f b7ef      	IN   R30,SREG
000070 93ea      	ST   -Y,R30
                 ; 0000 0047 // Reinitialize Timer 0 value
                 ; 0000 0048 TCNT0=0x83;
000071 e8e3      	LDI  R30,LOW(131)
000072 bfe2      	OUT  0x32,R30
                 ; 0000 0049 // Place your code here
                 ; 0000 004A 
                 ; 0000 004B     #asm("wdr")
000073 95a8      	wdr
                 ; 0000 004C     LED = 1;
000074 9ac2      	SBI  0x18,2
                 ; 0000 004D     if(++migMig > (600 - (abs(adcVal)))) migMig = 0;
000075 01f1      	MOVW R30,R2
000076 9631      	ADIW R30,1
000077 011f      	MOVW R2,R30
000078 01bf      	MOVW R22,R30
000079 2400      	CLR  R0
00007a 1480      	CP   R8,R0
00007b 0490      	CPC  R9,R0
00007c f014      	BRLT _0x11
00007d 01f4      	MOVW R30,R8
00007e c002      	RJMP _0x12
                 _0x11:
00007f 01f4      	MOVW R30,R8
000080 d104      	RCALL __ANEGW1
                 _0x12:
000081 e5a8      	LDI  R26,LOW(600)
000082 e0b2      	LDI  R27,HIGH(600)
000083 d105      	RCALL __SWAPW12
000084 1bea      	SUB  R30,R26
000085 0bfb      	SBC  R31,R27
000086 17e6      	CP   R30,R22
000087 07f7      	CPC  R31,R23
000088 f414      	BRGE _0x10
000089 2422      	CLR  R2
00008a 2433      	CLR  R3
                 ; 0000 004E 
                 ; 0000 004F     //if(setZero < 5000) setZero++;
                 ; 0000 0050    // else
                 ; 0000 0051     {
                 _0x10:
                 ; 0000 0052 
                 ; 0000 0053     // -512 < adcVal < 512
                 ; 0000 0054     if(adcVal <= DEAD_VALUE && adcVal >= -DEAD_VALUE)
00008b e1e4      	LDI  R30,LOW(20)
00008c e0f0      	LDI  R31,HIGH(20)
00008d 15e8      	CP   R30,R8
00008e 05f9      	CPC  R31,R9
00008f f02c      	BRLT _0x15
000090 eeec      	LDI  R30,LOW(65516)
000091 efff      	LDI  R31,HIGH(65516)
000092 168e      	CP   R8,R30
000093 069f      	CPC  R9,R31
000094 f40c      	BRGE _0x16
                 _0x15:
000095 c00c      	RJMP _0x14
                 _0x16:
                 ; 0000 0055     {
                 ; 0000 0056         if(pwmVal>0) pwmVal--;
000096 2400      	CLR  R0
000097 140a      	CP   R0,R10
000098 040b      	CPC  R0,R11
000099 f40c      	BRGE _0x17
00009a d0d3      	RCALL SUBOPT_0x0
                 ; 0000 0057         if(pwmVal<0) pwmVal++;
                 _0x17:
00009b 2400      	CLR  R0
00009c 14a0      	CP   R10,R0
00009d 04b0      	CPC  R11,R0
00009e f40c      	BRGE _0x18
00009f d0d2      	RCALL SUBOPT_0x1
                 ; 0000 0058          fl = 0;
                 _0x18:
0000a0 2466      	CLR  R6
                 ; 0000 0059     }
                 ; 0000 005A     else
0000a1 c03b      	RJMP _0x19
                 _0x14:
                 ; 0000 005B     if(adcVal < DEAD_VALUE-zero)
0000a2 d0d3      	RCALL SUBOPT_0x2
0000a3 e1e4      	LDI  R30,LOW(20)
0000a4 e0f0      	LDI  R31,HIGH(20)
0000a5 1bea      	SUB  R30,R26
0000a6 0bfb      	SBC  R31,R27
0000a7 168e      	CP   R8,R30
0000a8 069f      	CPC  R9,R31
0000a9 f424      	BRGE _0x1A
                 ; 0000 005C     {
                 ; 0000 005D          LED = 0;
0000aa 98c2      	CBI  0x18,2
                 ; 0000 005E          pwmVal = 0;
0000ab 24aa      	CLR  R10
0000ac 24bb      	CLR  R11
                 ; 0000 005F     }
                 ; 0000 0060     else
0000ad c02f      	RJMP _0x1D
                 _0x1A:
                 ; 0000 0061     {
                 ; 0000 0062         if(migMig>100) LED = 0;
0000ae e6e4      	LDI  R30,LOW(100)
0000af e0f0      	LDI  R31,HIGH(100)
0000b0 15e2      	CP   R30,R2
0000b1 05f3      	CPC  R31,R3
0000b2 f40c      	BRGE _0x1E
0000b3 98c2      	CBI  0x18,2
                 ; 0000 0063 
                 ; 0000 0064         if(adcVal > 0)
                 _0x1E:
0000b4 2400      	CLR  R0
0000b5 1408      	CP   R0,R8
0000b6 0409      	CPC  R0,R9
0000b7 f49c      	BRGE _0x21
                 ; 0000 0065         {
                 ; 0000 0066             if(adcVal - DEAD_VALUE > pwmVal && pwmVal < 255){ pwmVal++;  }
0000b8 01d4      	MOVW R26,R8
0000b9 9754      	SBIW R26,20
0000ba 16aa      	CP   R10,R26
0000bb 06bb      	CPC  R11,R27
0000bc f414      	BRGE _0x23
0000bd d0bd      	RCALL SUBOPT_0x3
0000be f00c      	BRLT _0x24
                 _0x23:
0000bf c001      	RJMP _0x22
                 _0x24:
0000c0 d0b1      	RCALL SUBOPT_0x1
                 ; 0000 0067             if(adcVal - DEAD_VALUE < pwmVal && pwmVal > -255){ pwmVal--;  }
                 _0x22:
0000c1 01d4      	MOVW R26,R8
0000c2 9754      	SBIW R26,20
0000c3 15aa      	CP   R26,R10
0000c4 05bb      	CPC  R27,R11
0000c5 f414      	BRGE _0x26
0000c6 d0b9      	RCALL SUBOPT_0x4
0000c7 f00c      	BRLT _0x27
                 _0x26:
0000c8 c001      	RJMP _0x25
                 _0x27:
0000c9 d0a4      	RCALL SUBOPT_0x0
                 ; 0000 0068         }
                 _0x25:
                 ; 0000 0069         else
0000ca c012      	RJMP _0x28
                 _0x21:
                 ; 0000 006A         {
                 ; 0000 006B             if(adcVal + DEAD_VALUE > pwmVal && pwmVal < 255){ pwmVal++;  }
0000cb 01d4      	MOVW R26,R8
0000cc 9654      	ADIW R26,20
0000cd 16aa      	CP   R10,R26
0000ce 06bb      	CPC  R11,R27
0000cf f414      	BRGE _0x2A
0000d0 d0aa      	RCALL SUBOPT_0x3
0000d1 f00c      	BRLT _0x2B
                 _0x2A:
0000d2 c001      	RJMP _0x29
                 _0x2B:
0000d3 d09e      	RCALL SUBOPT_0x1
                 ; 0000 006C             if(adcVal + DEAD_VALUE < pwmVal && pwmVal > -255){ pwmVal--; }
                 _0x29:
0000d4 01d4      	MOVW R26,R8
0000d5 9654      	ADIW R26,20
0000d6 15aa      	CP   R26,R10
0000d7 05bb      	CPC  R27,R11
0000d8 f414      	BRGE _0x2D
0000d9 d0a6      	RCALL SUBOPT_0x4
0000da f00c      	BRLT _0x2E
                 _0x2D:
0000db c001      	RJMP _0x2C
                 _0x2E:
0000dc d091      	RCALL SUBOPT_0x0
                 ; 0000 006D         }
                 _0x2C:
                 _0x28:
                 ; 0000 006E     }
                 _0x1D:
                 _0x19:
                 ; 0000 006F 
                 ; 0000 0070         if(pwmVal < 0)
0000dd 2400      	CLR  R0
0000de 14a0      	CP   R10,R0
0000df 04b0      	CPC  R11,R0
0000e0 f45c      	BRGE _0x2F
                 ; 0000 0071         {
                 ; 0000 0072             if(pwmVal<-140) fl=1;
0000e1 e7e4      	LDI  R30,LOW(65396)
0000e2 efff      	LDI  R31,HIGH(65396)
0000e3 16ae      	CP   R10,R30
0000e4 06bf      	CPC  R11,R31
0000e5 f414      	BRGE _0x30
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 2e6e      	MOV  R6,R30
                 ; 0000 0073            /* if(!fl)*/ OCR1A = 255 + pwmVal;
                 _0x30:
0000e8 2dea      	MOV  R30,R10
0000e9 50e1      	SUBI R30,-LOW(255)
0000ea bdee      	OUT  0x2E,R30
                 ; 0000 0074             //if(fl) OCR1B = -pwmVal;
                 ; 0000 0075         }
                 ; 0000 0076         else if(pwmVal > 0)
0000eb c011      	RJMP _0x31
                 _0x2F:
0000ec 2400      	CLR  R0
0000ed 140a      	CP   R0,R10
0000ee 040b      	CPC  R0,R11
0000ef f454      	BRGE _0x32
                 ; 0000 0077         {
                 ; 0000 0078             if(pwmVal>140) fl=1;
0000f0 e8ec      	LDI  R30,LOW(140)
0000f1 e0f0      	LDI  R31,HIGH(140)
0000f2 15ea      	CP   R30,R10
0000f3 05fb      	CPC  R31,R11
0000f4 f414      	BRGE _0x33
0000f5 e0e1      	LDI  R30,LOW(1)
0000f6 2e6e      	MOV  R6,R30
                 ; 0000 0079             // if(fl) OCR1A = pwmVal;
                 ; 0000 007A              /*if(!fl)*/ OCR1B = 255 - pwmVal;
                 _0x33:
0000f7 efef      	LDI  R30,LOW(255)
0000f8 19ea      	SUB  R30,R10
0000f9 c002      	RJMP _0x3D
                 ; 0000 007B         }
                 ; 0000 007C         else
                 _0x32:
                 ; 0000 007D         {
                 ; 0000 007E             OCR1A = 255;
0000fa efef      	LDI  R30,LOW(255)
0000fb bdee      	OUT  0x2E,R30
                 ; 0000 007F             OCR1B = 255;
                 _0x3D:
0000fc bdeb      	OUT  0x2B,R30
                 ; 0000 0080         }
                 _0x31:
                 ; 0000 0081 
                 ; 0000 0082     }
                 ; 0000 0083 }
0000fd 91e9      	LD   R30,Y+
0000fe bfef      	OUT  SREG,R30
0000ff 91f9      	LD   R31,Y+
000100 91e9      	LD   R30,Y+
000101 91b9      	LD   R27,Y+
000102 91a9      	LD   R26,Y+
000103 9179      	LD   R23,Y+
000104 9169      	LD   R22,Y+
000105 9019      	LD   R1,Y+
000106 9009      	LD   R0,Y+
000107 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;//Aref
                 ;#define ADC_VREF_TYPE 0x40
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 008C {
                 _adc_isr:
                 ; .FSTART _adc_isr
000108 938a      	ST   -Y,R24
000109 93aa      	ST   -Y,R26
00010a 93ba      	ST   -Y,R27
00010b 93ea      	ST   -Y,R30
00010c 93fa      	ST   -Y,R31
00010d b7ef      	IN   R30,SREG
00010e 93ea      	ST   -Y,R30
                 ; 0000 008D // Read the AD conversion result
                 ; 0000 008E adcTemp += ADCW;
00010f b1e4      	IN   R30,0x4
000110 b1f5      	IN   R31,0x4+1
                +
000111 0e4e     +ADD R4 , R30
000112 1e5f     +ADC R5 , R31
                 	__ADDWRR 4,5,30,31
                 ; 0000 008F if(++adcCount > 6)
000113 9473      	INC  R7
000114 e0e6      	LDI  R30,LOW(6)
000115 15e7      	CP   R30,R7
000116 f470      	BRSH _0x35
                 ; 0000 0090 {
                 ; 0000 0091     adcTemp >>= 3;
000117 9455      	ASR  R5
000118 9447      	ROR  R4
000119 9455      	ASR  R5
00011a 9447      	ROR  R4
00011b 9455      	ASR  R5
00011c 9447      	ROR  R4
                 ; 0000 0092     if(setZero < 500 && setZero > 495)
                 ; 0000 0093     {
                 ; 0000 0094        // zero = adcTemp;
                 ; 0000 0095     }
                 ; 0000 0096     adcCount=0;
00011d 2477      	CLR  R7
                 ; 0000 0097     adcVal = adcTemp-zero;
00011e d057      	RCALL SUBOPT_0x2
00011f 01f2      	MOVW R30,R4
000120 1bea      	SUB  R30,R26
000121 0bfb      	SBC  R31,R27
000122 014f      	MOVW R8,R30
                 ; 0000 0098     adcTemp = 0;
000123 2444      	CLR  R4
000124 2455      	CLR  R5
                 ; 0000 0099 }
                 ; 0000 009A // Select next ADC input
                 ; 0000 009B ADMUX=(ADCIN | (ADC_VREF_TYPE & 0xff));
                 _0x35:
000125 e4e2      	LDI  R30,LOW(66)
000126 b9e7      	OUT  0x7,R30
                 ; 0000 009C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 009D delay_us(10);
                +
000127 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000128 958a     +DEC R24
000129 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 009E // Start the AD conversion
                 ; 0000 009F ADCSRA|=0x40;
00012a 9a36      	SBI  0x6,6
                 ; 0000 00A0 }
00012b 91e9      	LD   R30,Y+
00012c bfef      	OUT  SREG,R30
00012d 91f9      	LD   R31,Y+
00012e 91e9      	LD   R30,Y+
00012f 91b9      	LD   R27,Y+
000130 91a9      	LD   R26,Y+
000131 9189      	LD   R24,Y+
000132 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 00A6 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A7 // Declare your local variables here
                 ; 0000 00A8 
                 ; 0000 00A9 // Crystal Oscillator division factor: 1
                 ; 0000 00AA #pragma optsize-
                 ; 0000 00AB CLKPR=0x80;
000133 e8e0      	LDI  R30,LOW(128)
000134 bde6      	OUT  0x26,R30
                 ; 0000 00AC CLKPR=0x00;
000135 e0e0      	LDI  R30,LOW(0)
000136 bde6      	OUT  0x26,R30
                 ; 0000 00AD #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00AE #pragma optsize+
                 ; 0000 00AF #endif
                 ; 0000 00B0 
                 ; 0000 00B1 // Port B initialization
                 ; 0000 00B2 // Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
                 ; 0000 00B3 // State5=T State4=T State3=1 State2=1 State1=1 State0=T
                 ; 0000 00B4 PORTB=0x0E;
000137 e0ee      	LDI  R30,LOW(14)
000138 bbe8      	OUT  0x18,R30
                 ; 0000 00B5 DDRB=0x0E;
000139 bbe7      	OUT  0x17,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // Timer/Counter 0 initialization
                 ; 0000 00B8 // Clock source: System Clock
                 ; 0000 00B9 // Clock value: 125,000 kHz
                 ; 0000 00BA // Mode: Normal top=0xFF
                 ; 0000 00BB // OC0A output: Disconnected
                 ; 0000 00BC // OC0B output: Disconnected
                 ; 0000 00BD TCCR0A=0x00;
00013a e0e0      	LDI  R30,LOW(0)
00013b bdea      	OUT  0x2A,R30
                 ; 0000 00BE TCCR0B=0x03;
00013c e0e3      	LDI  R30,LOW(3)
00013d bfe3      	OUT  0x33,R30
                 ; 0000 00BF TCNT0=0x83;
00013e e8e3      	LDI  R30,LOW(131)
00013f bfe2      	OUT  0x32,R30
                 ; 0000 00C0 OCR0A=0x00;
000140 e0e0      	LDI  R30,LOW(0)
000141 bde9      	OUT  0x29,R30
                 ; 0000 00C1 OCR0B=0x00;
000142 bde8      	OUT  0x28,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Timer/Counter 1 initialization
                 ; 0000 00C4 // Clock source: System Clock
                 ; 0000 00C5 // Clock value: 31,250 kHz
                 ; 0000 00C6 // Mode: Normal top=0xFF
                 ; 0000 00C7 // OC1A output: Disconnected
                 ; 0000 00C8 // OC1B output: Disconnected
                 ; 0000 00C9 // Timer1 Overflow Interrupt: On
                 ; 0000 00CA // Compare A Match Interrupt: On
                 ; 0000 00CB // Compare B Match Interrupt: On
                 ; 0000 00CC PLLCSR=0x00;
000143 bde7      	OUT  0x27,R30
                 ; 0000 00CD 
                 ; 0000 00CE TCCR1=0x09;
000144 e0e9      	LDI  R30,LOW(9)
000145 bfe0      	OUT  0x30,R30
                 ; 0000 00CF GTCCR=0x00;
000146 e0e0      	LDI  R30,LOW(0)
000147 bdec      	OUT  0x2C,R30
                 ; 0000 00D0 TCNT1=0x00;
000148 bdef      	OUT  0x2F,R30
                 ; 0000 00D1 OCR1A=0xFF;
000149 efef      	LDI  R30,LOW(255)
00014a bdee      	OUT  0x2E,R30
                 ; 0000 00D2 OCR1B=0xFF;
00014b bdeb      	OUT  0x2B,R30
                 ; 0000 00D3 OCR1C=0x00;
00014c e0e0      	LDI  R30,LOW(0)
00014d bded      	OUT  0x2D,R30
                 ; 0000 00D4 
                 ; 0000 00D5 
                 ; 0000 00D6 // External Interrupt(s) initialization
                 ; 0000 00D7 // INT0: Off
                 ; 0000 00D8 // Interrupt on any change on pins PCINT0-5: Off
                 ; 0000 00D9 GIMSK=0x00;
00014e bfeb      	OUT  0x3B,R30
                 ; 0000 00DA MCUCR=0x00;
00014f bfe5      	OUT  0x35,R30
                 ; 0000 00DB 
                 ; 0000 00DC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00DD TIMSK=0x66;
000150 e6e6      	LDI  R30,LOW(102)
000151 bfe9      	OUT  0x39,R30
                 ; 0000 00DE 
                 ; 0000 00DF // Universal Serial Interface initialization
                 ; 0000 00E0 // Mode: Disabled
                 ; 0000 00E1 // Clock source: Register & Counter=no clk.
                 ; 0000 00E2 // USI Counter Overflow Interrupt: Off
                 ; 0000 00E3 USICR=0x00;
000152 e0e0      	LDI  R30,LOW(0)
000153 b9ed      	OUT  0xD,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // Analog Comparator initialization
                 ; 0000 00E6 // Analog Comparator: Off
                 ; 0000 00E7 ACSR=0x80;
000154 e8e0      	LDI  R30,LOW(128)
000155 b9e8      	OUT  0x8,R30
                 ; 0000 00E8 ADCSRB=0x00;
000156 e0e0      	LDI  R30,LOW(0)
000157 b9e3      	OUT  0x3,R30
                 ; 0000 00E9 DIDR0=0x00;
000158 bbe4      	OUT  0x14,R30
                 ; 0000 00EA 
                 ; 0000 00EB // ADC initialization
                 ; 0000 00EC // ADC Clock frequency: 125,000 kHz
                 ; 0000 00ED // ADC Voltage Reference: AREF pin
                 ; 0000 00EE // ADC Bipolar Input Mode: Off
                 ; 0000 00EF // ADC Reverse Input Polarity: Off
                 ; 0000 00F0 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00F1 // Digital input buffers on ADC0: On, ADC1: On, ADC2: Off, ADC3: On
                 ; 0000 00F2 DIDR0&=0x03;
000159 b3e4      	IN   R30,0x14
00015a 70e3      	ANDI R30,LOW(0x3)
00015b bbe4      	OUT  0x14,R30
                 ; 0000 00F3 DIDR0|=0x10 | 0x1;
00015c b3e4      	IN   R30,0x14
00015d 61e1      	ORI  R30,LOW(0x11)
00015e bbe4      	OUT  0x14,R30
                 ; 0000 00F4 
                 ; 0000 00F5 ADMUX= ADCIN | (ADC_VREF_TYPE & 0xff);
00015f e4e2      	LDI  R30,LOW(66)
000160 b9e7      	OUT  0x7,R30
                 ; 0000 00F6 ADCSRA=0xCE;
000161 ecee      	LDI  R30,LOW(206)
000162 b9e6      	OUT  0x6,R30
                 ; 0000 00F7 ADCSRB&=0x5F;
000163 b1e3      	IN   R30,0x3
000164 75ef      	ANDI R30,LOW(0x5F)
000165 b9e3      	OUT  0x3,R30
                 ; 0000 00F8 
                 ; 0000 00F9 
                 ; 0000 00FA // Watchdog Timer initialization
                 ; 0000 00FB // Watchdog Timer Prescaler: OSC/1024k
                 ; 0000 00FC // Watchdog Timer interrupt: Off
                 ; 0000 00FD #pragma optsize-
                 ; 0000 00FE #asm("wdr")
000166 95a8      	wdr
                 ; 0000 00FF WDTCR=0x39;
000167 e3e9      	LDI  R30,LOW(57)
000168 bde1      	OUT  0x21,R30
                 ; 0000 0100 WDTCR=0x29;
000169 e2e9      	LDI  R30,LOW(41)
00016a bde1      	OUT  0x21,R30
                 ; 0000 0101 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0102 #pragma optsize+
                 ; 0000 0103 #endif
                 ; 0000 0104 
                 ; 0000 0105 // Global enable interrupts
                 ; 0000 0106 #asm("sei")
00016b 9478      	sei
                 ; 0000 0107 
                 ; 0000 0108 while (1)
                 _0x39:
                 ; 0000 0109       {
                 ; 0000 010A       // Place your code here
                 ; 0000 010B 
                 ; 0000 010C       }
00016c cfff      	RJMP _0x39
                 ; 0000 010D }
                 _0x3C:
00016d cfff      	RJMP _0x3C
                 ; .FEND
                 
                 	.DSEG
                 _zero:
0000e0           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00016e 01f5      	MOVW R30,R10
00016f 9731      	SBIW R30,1
000170 015f      	MOVW R10,R30
000171 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000172 01f5      	MOVW R30,R10
000173 9631      	ADIW R30,1
000174 015f      	MOVW R10,R30
000175 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000176 91a0 00e0 	LDS  R26,_zero
000178 91b0 00e1 	LDS  R27,_zero+1
00017a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00017b efef      	LDI  R30,LOW(255)
00017c e0f0      	LDI  R31,HIGH(255)
00017d 16ae      	CP   R10,R30
00017e 06bf      	CPC  R11,R31
00017f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000180 e0e1      	LDI  R30,LOW(65281)
000181 efff      	LDI  R31,HIGH(65281)
000182 15ea      	CP   R30,R10
000183 05fb      	CPC  R31,R11
000184 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000185 95f1      	NEG  R31
000186 95e1      	NEG  R30
000187 40f0      	SBCI R31,0
000188 9508      	RET
                 
                 __SWAPW12:
000189 2e1b      	MOV  R1,R27
00018a 2fbf      	MOV  R27,R31
00018b 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00018c 2e1a      	MOV  R1,R26
00018d 2fae      	MOV  R26,R30
00018e 2de1      	MOV  R30,R1
00018f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny85 register use summary:
r0 :  24 r1 :   7 r2 :   4 r3 :   2 r4 :   6 r5 :   5 r6 :   3 r7 :   3 
r8 :  12 r9 :   5 r10:  19 r11:  13 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   3 
r24:  11 r25:   2 r26:  29 r27:  17 r28:   1 r29:   1 r30: 155 r31:  33 
x  :   3 y  :  36 z  :   7 
Registers used: 25 out of 35 (71.4%)

ATtiny85 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   4 and   :   0 andi  :   2 asr   :   3 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   1 
brge  :  15 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   6 brmi  :   0 brne  :   4 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   4 
cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  16 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  20 
cpc   :  19 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  12 
inc   :   1 ld    :  17 ldd   :   0 ldi   :  58 lds   :   2 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   9 movw  :  18 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   1 out   :  48 
pop   :   0 push  :   0 rcall :  14 ret   :   7 reti  :   4 rjmp  :  31 
rol   :   0 ror   :   3 sbc   :   3 sbci  :   1 sbi   :   4 sbic  :   0 
sbis  :   0 sbiw  :   6 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  22 std   :   0 
sts   :   0 sub   :   4 subi  :   1 swap  :   0 tst   :   0 wdr   :   3 

Instructions used: 43 out of 114 (37.7%)

ATtiny85 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000320    772     28    800    8192   9.8%
[.dseg] 0x000060 0x0000e2      0      2      2     512   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
