;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 28.09.2015
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny85
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <tiny85.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;#define abs(_a) (((_a)>=0)?_a:-_a)
;
;#define LED PORTB.2
;#define ADCIN 2
;#define DEAD_VALUE 20
;#define PWM1 PORTB.1
;#define PWM2 PORTB.3
;
;int migMig=0;
;signed int adcTemp=0;
;char adcCount=0;
;signed int adcVal=0;
;signed int pwmVal=0;
;unsigned int setZero=0;
;signed int zero = 385;

	.DSEG
;char fl = 0;
;
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 002F {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0030     PWM1 = 1;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0031     PWM2 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0032 
; 0000 0033 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0037 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0038 // Place your code here
; 0000 0039     if(OCR1A<255) PWM1 = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;
;// Timer1 output compare B interrupt service routine
;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
; 0000 003E {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003F // Place your code here
; 0000 0040     if(OCR1B<255) PWM2 = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0041 }
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void) //1ms
; 0000 0046 {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0047 // Reinitialize Timer 0 value
; 0000 0048 TCNT0=0x83;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0049 // Place your code here
; 0000 004A 
; 0000 004B     #asm("wdr")
;PCODE: $0000002E VOL: 0
	wdr
;PCODE: $0000002F VOL: 0
; 0000 004C     LED = 1;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004D     if(++migMig > (600 - (abs(adcVal)))) migMig = 0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004E 
; 0000 004F     //if(setZero < 5000) setZero++;
; 0000 0050    // else
; 0000 0051     {
;PCODE: $00000045 VOL: 0
; 0000 0052 
; 0000 0053     // -512 < adcVal < 512
; 0000 0054     if(adcVal <= DEAD_VALUE && adcVal >= -DEAD_VALUE)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0055     {
; 0000 0056         if(pwmVal>0) pwmVal--;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0057         if(pwmVal<0) pwmVal++;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0058          fl = 0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0059     }
; 0000 005A     else
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 005B     if(adcVal < DEAD_VALUE-zero)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005C     {
; 0000 005D          LED = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005E          pwmVal = 0;
;PCODE: $00000066 VOL: 0
; 0000 005F     }
; 0000 0060     else
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0061     {
; 0000 0062         if(migMig>100) LED = 0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0063 
; 0000 0064         if(adcVal > 0)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0065         {
; 0000 0066             if(adcVal - DEAD_VALUE > pwmVal && pwmVal < 255){ pwmVal++;  }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0067             if(adcVal - DEAD_VALUE < pwmVal && pwmVal > -255){ pwmVal--;  }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0068         }
;PCODE: $0000008E VOL: 0
; 0000 0069         else
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006A         {
; 0000 006B             if(adcVal + DEAD_VALUE > pwmVal && pwmVal < 255){ pwmVal++;  }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 006C             if(adcVal + DEAD_VALUE < pwmVal && pwmVal > -255){ pwmVal--; }
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 006D         }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 006E     }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 006F 
; 0000 0070         if(pwmVal < 0)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0071         {
; 0000 0072             if(pwmVal<-140) fl=1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0073            /* if(!fl)*/ OCR1A = 255 + pwmVal;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0074             //if(fl) OCR1B = -pwmVal;
; 0000 0075         }
; 0000 0076         else if(pwmVal > 0)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0077         {
; 0000 0078             if(pwmVal>140) fl=1;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0079             // if(fl) OCR1A = pwmVal;
; 0000 007A              /*if(!fl)*/ OCR1B = 255 - pwmVal;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 007B         }
; 0000 007C         else
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 007D         {
; 0000 007E             OCR1A = 255;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 007F             OCR1B = 255;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0080         }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0081 
; 0000 0082     }
; 0000 0083 }
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;
;
;//Aref
;#define ADC_VREF_TYPE 0x40
;
;// ADC interrupt service routine
;// with auto input scanning
;interrupt [ADC_INT] void adc_isr(void)
; 0000 008C {
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 008D // Read the AD conversion result
; 0000 008E adcTemp += ADCW;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 008F if(++adcCount > 6)
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0090 {
; 0000 0091     adcTemp >>= 3;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0092     if(setZero < 500 && setZero > 495)
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0093     {
; 0000 0094        // zero = adcTemp;
; 0000 0095     }
; 0000 0096     adcCount=0;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0097     adcVal = adcTemp-zero;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0098     adcTemp = 0;
;PCODE: $000000F1 VOL: 0
; 0000 0099 }
; 0000 009A // Select next ADC input
; 0000 009B ADMUX=(ADCIN | (ADC_VREF_TYPE & 0xff));
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 009C // Delay needed for the stabilization of the ADC input voltage
; 0000 009D delay_us(10);
;PCODE: $000000F5 VOL: 0
; 0000 009E // Start the AD conversion
; 0000 009F ADCSRA|=0x40;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A0 }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 00A6 {
;PCODE: $000000FB VOL: 0
; 0000 00A7 // Declare your local variables here
; 0000 00A8 
; 0000 00A9 // Crystal Oscillator division factor: 1
; 0000 00AA #pragma optsize-
; 0000 00AB CLKPR=0x80;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00AC CLKPR=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00AD #ifdef _OPTIMIZE_SIZE_
; 0000 00AE #pragma optsize+
; 0000 00AF #endif
; 0000 00B0 
; 0000 00B1 // Port B initialization
; 0000 00B2 // Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
; 0000 00B3 // State5=T State4=T State3=1 State2=1 State1=1 State0=T
; 0000 00B4 PORTB=0x0E;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00B5 DDRB=0x0E;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00B6 
; 0000 00B7 // Timer/Counter 0 initialization
; 0000 00B8 // Clock source: System Clock
; 0000 00B9 // Clock value: 125,000 kHz
; 0000 00BA // Mode: Normal top=0xFF
; 0000 00BB // OC0A output: Disconnected
; 0000 00BC // OC0B output: Disconnected
; 0000 00BD TCCR0A=0x00;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00BE TCCR0B=0x03;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00BF TCNT0=0x83;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00C0 OCR0A=0x00;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C1 OCR0B=0x00;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00C2 
; 0000 00C3 // Timer/Counter 1 initialization
; 0000 00C4 // Clock source: System Clock
; 0000 00C5 // Clock value: 31,250 kHz
; 0000 00C6 // Mode: Normal top=0xFF
; 0000 00C7 // OC1A output: Disconnected
; 0000 00C8 // OC1B output: Disconnected
; 0000 00C9 // Timer1 Overflow Interrupt: On
; 0000 00CA // Compare A Match Interrupt: On
; 0000 00CB // Compare B Match Interrupt: On
; 0000 00CC PLLCSR=0x00;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00CD 
; 0000 00CE TCCR1=0x09;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00CF GTCCR=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00D0 TCNT1=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00D1 OCR1A=0xFF;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00D2 OCR1B=0xFF;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00D3 OCR1C=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00D4 
; 0000 00D5 
; 0000 00D6 // External Interrupt(s) initialization
; 0000 00D7 // INT0: Off
; 0000 00D8 // Interrupt on any change on pins PCINT0-5: Off
; 0000 00D9 GIMSK=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00DA MCUCR=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00DB 
; 0000 00DC // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00DD TIMSK=0x66;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00DE 
; 0000 00DF // Universal Serial Interface initialization
; 0000 00E0 // Mode: Disabled
; 0000 00E1 // Clock source: Register & Counter=no clk.
; 0000 00E2 // USI Counter Overflow Interrupt: Off
; 0000 00E3 USICR=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00E4 
; 0000 00E5 // Analog Comparator initialization
; 0000 00E6 // Analog Comparator: Off
; 0000 00E7 ACSR=0x80;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00E8 ADCSRB=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00E9 DIDR0=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00EA 
; 0000 00EB // ADC initialization
; 0000 00EC // ADC Clock frequency: 125,000 kHz
; 0000 00ED // ADC Voltage Reference: AREF pin
; 0000 00EE // ADC Bipolar Input Mode: Off
; 0000 00EF // ADC Reverse Input Polarity: Off
; 0000 00F0 // ADC Auto Trigger Source: ADC Stopped
; 0000 00F1 // Digital input buffers on ADC0: On, ADC1: On, ADC2: Off, ADC3: On
; 0000 00F2 DIDR0&=0x03;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00F3 DIDR0|=0x10 | 0x1;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F4 
; 0000 00F5 ADMUX= ADCIN | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F6 ADCSRA=0xCE;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00F7 ADCSRB&=0x5F;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00F8 
; 0000 00F9 
; 0000 00FA // Watchdog Timer initialization
; 0000 00FB // Watchdog Timer Prescaler: OSC/1024k
; 0000 00FC // Watchdog Timer interrupt: Off
; 0000 00FD #pragma optsize-
; 0000 00FE #asm("wdr")
;PCODE: $00000137 VOL: 0
	wdr
;PCODE: $00000138 VOL: 0
; 0000 00FF WDTCR=0x39;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0100 WDTCR=0x29;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0101 #ifdef _OPTIMIZE_SIZE_
; 0000 0102 #pragma optsize+
; 0000 0103 #endif
; 0000 0104 
; 0000 0105 // Global enable interrupts
; 0000 0106 #asm("sei")
;PCODE: $0000013D VOL: 0
	sei
;PCODE: $0000013E VOL: 0
; 0000 0107 
; 0000 0108 while (1)
;PCODE: $0000013F VOL: 0
; 0000 0109       {
; 0000 010A       // Place your code here
; 0000 010B 
; 0000 010C       }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 010D }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
